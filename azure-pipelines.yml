# Set variables once
variables:
  configuration: debug
  IOS_SCHEME: DiscoverFinancial
  TEST_IOS_SDK: iphonesimulator11.4
  TEST_IOS_PLATFORM: iOS Simulator
  TEST_IOS_OS: 11.4
  TEST_IOS_DEVICE_NAME: 'iPhone SE'
  IOS_FABRIC_UPLOAD: 1
  ANDROID_FABRIC_UPLOAD: 1

jobs:
- job: JS_PreBuild_Checks
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '8.x'
  - task: Bash@3
    displayName: 'Flow checks'
    inputs:
      targetType: inline
      script: echo FLOW check script
  - task: Bash@3
    displayName: 'ESLint checks'
    inputs:
      targetType: inline
      script: echo ESLINT check script
  - task: Bash@3
    displayName: 'Circular dependency checks'
    inputs:
      targetType: inline
      script: echo CIRCLE dependency check script
  - task: Bash@3
    displayName: 'JSON Lint checks'
    inputs:
      targetType: inline
      script: echo JSON Lint check script

  - script: |
      npm install
      npm test
    
# - job: Debug_Build
#   pool:
#     name: default
#     timeoutInMinutes: 30
#     # vmImage: 'macOS 10.13'
#   dependsOn: JS_PreBuild_Checks
#   condition: succeeded()
#   strategy:
#     maxParallel: 2
#     matrix: 
#       Android:
#         demands:
#         - agent.os -equals linux
#         TEST_ESLINT_CHECKS: 1
        
#       iOS:
#         demands:
#         - agent.os -equals Darwin
#         TEST_ESLINT_CHECKS: 0
#   steps: 
#   - script: echo this is matrix ${TEST_ESLINT_CHECKS}
        
      


- job: Android_Debug
  pool:
    vmImage: 'macOS 10.13'
  dependsOn: JS_PreBuild_Checks
  condition: succeeded()
  steps:
  - task: NodeTool@0
    displayName: 'Install Node v8.x'
    inputs:
      versionSpec: '8.x'
  - script: |
      npm install
      
  - task: Gradle@2
    inputs:
      workingDirectory: '$(system.defaultWorkingDirectory)/android'
      gradleWrapperFile: '$(system.defaultWorkingDirectory)/android/gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'assembleDebug'

  - task: CopyFiles@2
    inputs:
      contents: '**/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(build.artifactStagingDirectory)'
      artifactName: 'drop'
      artifactType: 'container'

- job: iOS_Debug
  pool:
    vmImage: 'macOS 10.13'
  dependsOn: JS_PreBuild_Checks
  condition: succeeded()
  steps:
  - script: echo hello from iOS Debug job $(Build.Reason)
